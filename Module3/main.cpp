/**----------------------------------------------------------------------------
 
   \file main.cpp

--                                                                           --
--              ECEN 5803 Mastering Embedded System Architecture             --
--                  Project 1 Module 3                                       --
--                Microcontroller Firmware                                   --
--                      main.cpp                                            --
--                                                                           --
-------------------------------------------------------------------------------
--
--  Designed for:  University of Colorado at Boulder
--               
--                
--  Designed by:  Tim Scherr
--  Revised by:  Student's name 
-- 
-- Version: 2.1
-- Date of current revision:  2017-09-20  
-- Target Microcontroller: Freescale MKL25ZVMT4 
-- Tools used:  ARM mbed compiler
--              ARM mbed SDK
--              Freescale FRDM-KL25Z Freedom Board
--               
-- 
-- Functional Description:  Main code file generated by mbed, and then
--                           modified to implement a super loop bare metal OS.
--
--      Copyright (c) 2015, 2016 Tim Scherr  All rights reserved.
--
*/

#define MAIN
#include "shared.h"
#undef MAIN

extern volatile uint16_t SwTimerIsrCounter; 

Ticker tick;             //  Creates a timer interrupt using mbed methods
DigitalOut redLED(LED_RED);
DigitalOut greenLED(LED_GREEN);
DigitalOut blueLED(LED_BLUE);
Serial pc(USBTX, USBRX);     
Timer maint;

 __asm uint32_t read_register(int x){
	PUSH{r1}		;
		
	MOV r1, r15;
	CMP r0, #15	;
	BEQ finish	;
	
	MOV r1, r14;
	CMP r0, #14	;
	BEQ finish	;
	
	MOV r1, r13;
	CMP r0, #13	;
	BEQ finish	;
	
	MOV r1, r12;
	CMP r0, #12	;
	BEQ finish	;
	
	MOV r1, r11;
	CMP r0, #11	;
	BEQ finish	;
	
	MOV r1, r10	;
	CMP r0, #10	;
	BEQ finish	;
	
	MOV r1, r9	;
	CMP r0, #9	;
	BEQ finish	;
	
	MOV r1, r8;
	CMP r0, #8	;
	BEQ finish	;
	
	MOV r1, r7	;
	CMP r0, #7	;
	BEQ finish	;
	
	MOV r1, r6	;
	CMP r0, #6	;
	BEQ finish	;
	
	MOV r1, r5	;
	CMP r0, #5	;
	BEQ finish	;
	
	MOV r1, r4	;
	CMP r0, #4	;
	BEQ finish	;
	
	MOV r1, r3	;
	CMP r0, #3	;
	BEQ finish	;
	
	MOV r1, r2;
	CMP r0, #2	;
	BEQ finish	;
	
	MOV r1, r1;
	CMP r0, #1	;
	BEQ finish	;
	
	MOV r0, r0;
	CMP r0, #0	;
	BEQ finish	;
	
finish

	MOVS r0, r1;
	POP{r1};
	BX lr				;
 }
 
void flip()  
{                
    greenLED = !greenLED;
}
 
int main() 
{
	maint.start();
	tick.attach(&timer0, 0.0001); // setup ticker to call timer0 every 100 microseconds

    pc.printf("Hello World!\n"); 
    uint32_t  count = 0;   
    blueLED = 1;
		greenLED = 1;
    // initialize serial buffer pointers
    rx_in_ptr =  rx_buf; /* pointer to the receive in data */
    rx_out_ptr = rx_buf; /* pointer to the receive out data*/
    tx_in_ptr =  tx_buf; /* pointer to the transmit in data*/
    tx_out_ptr = tx_buf; /* pointer to the transmit out */
    
   
    // Print the initial banner
    pc.printf("\r\nHello World!\n\n\r");

    /* send a message to the terminal  */                    
    UART_direct_msg_put("\r\nSystem Reset\r\nCode ver. ");
    UART_direct_msg_put( CODE_VERSION );
    UART_direct_msg_put("\r\n");
    UART_direct_msg_put( COPYRIGHT );
    UART_direct_msg_put("\r\n");

    set_display_mode();                                      
 
    while(1)       /// Cyclical Executive Loop
    {
        count++;               // counts the number of times through the loop
//      __enable_interrupts();
//      __clear_watchdog_timer();

        serial();            // Polls the serial port
        chk_UART_msg();     // checks for a serial port message received
        monitor();           // Sends serial port output messages depending
                         //     on commands received and display mode

        if ((SwTimerIsrCounter & 0x1FFF) > 0x0FFF)
        {
            flip();  // Toggle Green LED
        }
		maint.stop();
//		pc.printf("\rThe time spent in main was %f seconds\n", maint.read());
		maint.reset();
		}  
}
